/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/

"use strict";

const util = require("util");
const webpackOptionsSchema = require("../schemas/WebpackOptions.json");
// Webpack 的全局控制
const Compiler = require("./Compiler");
const MultiCompiler = require("./MultiCompiler");
const WebpackOptionsApply = require("./WebpackOptionsApply");
const {
	applyWebpackOptionsDefaults,
	applyWebpackOptionsBaseDefaults
} = require("./config/defaults");
const { getNormalizedWebpackOptions } = require("./config/normalization");
const NodeEnvironmentPlugin = require("./node/NodeEnvironmentPlugin");
const validateSchema = require("./validateSchema");
const { yellow, magenta } = require('colorette');
const console = require('customLog');

/** @typedef {import("../declarations/WebpackOptions").WebpackOptions} WebpackOptions */
/** @typedef {import("./Compiler")} Compiler */
/** @typedef {import("./Compiler").WatchOptions} WatchOptions */
/** @typedef {import("./MultiCompiler")} MultiCompiler */
/** @typedef {import("./MultiStats")} MultiStats */
/** @typedef {import("./Stats")} Stats */

/**
 * @template T
 * @callback Callback
 * @param {Error=} err
 * @param {T=} stats
 * @returns {void}
 */

/**
 * @param {WebpackOptions[]} childOptions options array
 * @returns {MultiCompiler} a multi-compiler
 */
const createMultiCompiler = childOptions => {
	const compilers = childOptions.map(options => createCompiler(options));
	const compiler = new MultiCompiler(compilers);
	for (const childCompiler of compilers) {
		if (childCompiler.options.dependencies) {
			compiler.setDependencies(
				childCompiler,
				childCompiler.options.dependencies
			);
		}
	}
	return compiler;
};

/**
 * @param {WebpackOptions} rawOptions options object
 * @returns {Compiler} a compiler
 */
const createCompiler = rawOptions => {
	const options = getNormalizedWebpackOptions(rawOptions);
	console.log("🌺 20. 得到标准化options, options (太长了) 其中， options.context: ", options.context);
	applyWebpackOptionsBaseDefaults(options);
	console.log("🌺 21. options.context 不存在时，将它设置为当前目录 options.context: ", options.context);
	// 创建 compiler
	const compiler = new Compiler(options.context);
	console.log("🌺 22. 创建compiler💡 参数: ", options.context, `经过 Compiler 构造函数，complier 上注册了钩子 hook， 通过 ${yellow('tapable')} 进行管理 `);
	compiler.options = options;
	new NodeEnvironmentPlugin({
		infrastructureLogging: options.infrastructureLogging
	}).apply(compiler);
	console.log("🌺 23. 注册 plugin，为 plugin 传入 compiler ", options.plugins);
	// 注册 plugin
	if (Array.isArray(options.plugins)) {
		for (const plugin of options.plugins) {
			if (typeof plugin === "function") {
				// plugin 是函数，直接调用，并传入 compiler
				plugin.call(compiler, compiler);
			} else {
				// plugin 为非函数，要求 plugin 上注册 apply 函数，plugin 可以从 apply 中拿到 compiler
				plugin.apply(compiler);
			}
		}
	}
	// 应用 webpack 默认选项配置
	applyWebpackOptionsDefaults(options);

	console.log(magenta('    🐶 1. hooks: environment call'));
	compiler.hooks.environment.call();
	console.log(magenta('    🐶 2. hooks: afterEnvironment call'));
	compiler.hooks.afterEnvironment.call();

	new WebpackOptionsApply().process(options, compiler);
	// 调用初始化钩子
	console.log(magenta('    🐶 3. hooks: initialize call'));
	compiler.hooks.initialize.call();
	return compiler;
};

/**
 * @callback WebpackFunctionSingle
 * @param {WebpackOptions} options options object
 * @param {Callback<Stats>=} callback callback
 * @returns {Compiler} the compiler object
 */

/**
 * @callback WebpackFunctionMulti
 * @param {WebpackOptions[]} options options objects
 * @param {Callback<MultiStats>=} callback callback
 * @returns {MultiCompiler} the multi compiler object
 */

const webpack = /** @type {WebpackFunctionSingle & WebpackFunctionMulti} */ ((
	options,
	callback
) => {
	console.log('--------------------------------------------------------');
	console.log('🌺 19. 进入 webpack，开始创建 complier，得到参数 options: \n', options, '\n callback: ',  callback);
	const create = () => {
		// 检验格式是否正确
		validateSchema(webpackOptionsSchema, options);
		/** @type {MultiCompiler|Compiler} */
		let compiler;
		let watch = false;
		/** @type {WatchOptions|WatchOptions[]} */
		let watchOptions;
		// 多个配置
		if (Array.isArray(options)) {
			/** @type {MultiCompiler} */
			compiler = createMultiCompiler(options);
			watch = options.some(options => options.watch);
			watchOptions = options.map(options => options.watchOptions || {});
			console.log('🌺 24. 创建出多配置 complier, 得到: compiler, watch: ', watch, 'watchOptions: ', watchOptions);
		} else {
			/** @type {Compiler} */
			compiler = createCompiler(options);
			watch = options.watch;
			watchOptions = options.watchOptions || {};
			console.log('🌺 24. 创建出单配置 complier, 得到: compiler, watch: ', watch, 'watchOptions: ', watchOptions);
		}
		return { compiler, watch, watchOptions };
	};
	if (callback) {
		try {
			const { compiler, watch, watchOptions } = create();
			console.log('--------------------------------------------------------');
			if (watch) {
				compiler.watch(watchOptions, callback);
			} else {
				// 开始构建
				compiler.run((err, stats) => {
					compiler.close(err2 => {
						callback(err || err2, stats);
					});
				});
			}
			return compiler;
		} catch (err) {
			process.nextTick(() => callback(err));
			return null;
		}
	} else {
		const { compiler, watch } = create();
		if (watch) {
			util.deprecate(
				() => {},
				"A 'callback' argument need to be provided to the 'webpack(options, callback)' function when the 'watch' option is set. There is no way to handle the 'watch' option without a callback.",
				"DEP_WEBPACK_WATCH_WITHOUT_CALLBACK"
			)();
		}
		return compiler;
	}
});

module.exports = webpack;
